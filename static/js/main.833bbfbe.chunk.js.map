{"version":3,"sources":["Assets/img/fondito.jpg","Assets/img/bob.gif","Common/Navbar/BurgerMenu.js","Common/Navbar/CollapseMenu.js","Common/Navbar/Navbar.js","Common/home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","styled","div","animated","ul","nav","h1","fondito","require","bob","Home","FlexContainerColumn","Title","Subtitle","Img","src","h2","img","App","useState","useHasScrolled","distance","scroll","setScroll","useEffect","onScroll","scrollCheck","window","scrollY","document","addEventListener","removeEventListener","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,ixCCqB3BC,IAAOC,IAAV,K,m1BCiBWD,YAAOE,IAASD,IAAhBD,CAAH,KAiBJA,IAAOG,GAAV,K,mtDCXCH,YAAOE,IAASE,IAAhBJ,CAAH,KAiBUA,IAAOC,IAAV,KA4BGD,IAAOC,IAAV,KAIND,IAAOK,GAAV,KAeML,IAAOG,GAAV,K,gyBC1Gb,IAAMG,EAAUC,EAAQ,IAClBC,EAAMD,EAAQ,IAWLE,EATF,WACX,OACE,kBAACC,EAAD,KACE,kBAACC,EAAD,qCACA,kBAACC,EAAD,wDACA,kBAACC,EAAD,CAAKC,IAAKN,MAMVE,EAAsBV,IAAOC,IAAV,IASGK,GAItBK,EAAQX,IAAOK,GAAV,KAWLO,EAAWZ,IAAOe,GAAV,KAYRF,EAAMb,IAAOgB,IAAV,KCrCMC,EAVH,WAAO,IAAD,EACoBC,oBAAS,GAD7B,6BAEDC,EAAe,KAM9B,OAAO,kBAAC,EAAD,OAIIA,EAAiB,WAAoB,IAAnBC,EAAkB,uDAAP,GAAO,EACnBF,oBAAS,GADU,mBACxCG,EADwC,KAChCC,EADgC,KAkB/C,OAfAC,qBAAU,WACR,IAAMC,EAAW,WACf,IAAMC,EAAcC,OAAOC,SAAWP,EAClCK,IAAgBJ,GAClBC,EAAUG,IAMd,OAFAG,SAASC,iBAAiB,SAAUL,GAE7B,WACLI,SAASE,oBAAoB,SAAUN,MAExC,CAACH,EAAQC,EAAWF,IAEhBC,GCvBWU,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFT,SAASU,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.833bbfbe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fondito.5b8c6ae4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bob.438bfa06.gif\";","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Burgermenu = (props) => {\n  function handleChange(event) {\n    props.onChange(props.navbarState);\n  }\n\n  return (\n    <Wrapper onClick={handleChange} className={` ${props.navbarState ? \"open\" : \"\" } ${props.scrollClass}`}>\n      <div className={` ${props.navbarState ? \"open\" : \"\" } ${props.scrollClass}`}>\n        <span>&nbsp;</span>\n        <span>&nbsp;</span>\n        <span>&nbsp;</span>\n      </div>\n    </Wrapper>\n  );\n};\n\nexport default Burgermenu;\n\nconst Wrapper = styled.div`\n  position: relative;\n  padding-top: 0.7rem;\n  cursor: pointer;\n  display: block;\n  z-index: 20;\n  \n  @media (min-width: 768px) {\n    display: none;\n    &.open {\n      display: block;\n    }\n    &.sticky {\n      display: block;\n    }\n  }\n\n  & span {\n    background: white;\n    display: block;\n    position: relative;\n    width: 3.5rem;\n    height: 0.4rem;\n    margin-bottom: 0.3rem;\n    transition: all ease-in-out 0.2s;\n  }\n  span:nth-child(2) {\n    opacity: 0;\n  }\n  .open:not(.sticky) span:nth-child(1) {\n    background: white;\n    transform: rotate(-45deg);\n    top: 11px;\n  }\n  .open:not(.sticky) span:nth-child(3) {\n    transform: rotate(45deg);\n    top: -11px;\n    background: white;\n  }\n\n  .sticky:not(.open) span:nth-child(1) {\n    background: #001027;\n  }\n  .sticky:not(.open) span:nth-child(3) {\n    background: #001027;\n  }\n\n  .sticky.open span:nth-child(1) {\n    background: white;\n    transform: rotate(-45deg);\n    top: 11px;\n  }\n  .sticky.open span:nth-child(3) {\n    transform: rotate(45deg);\n    background: white;\n    top: -11px;\n  }\n\n  \n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { useSpring, animated } from \"react-spring\";\nimport { Link } from \"react-router-dom\";\n\nconst CollapseMenu = (props) => {\n  const { open } = useSpring({ open: props.navbarState ? 0 : 1 });\n  const { closed } = useSpring({ closed: props.navbarState ? 1 : 0 });\n  \n  function handleChange() {\n    props.onChange();\n  }\n\n  return (\n    <CollapseWrapper\n      className={!!props.navbarState ? \"show\" : \"hide\"}\n      style={{\n        transform: open\n          .interpolate({ range: [0, 0.2, 0.3, 1], output: [0, -20, 0, -200] })\n          .interpolate((openValue) => `translate3d(0, ${openValue}px, 0`),\n        close: closed\n          .interpolate({ range: [1, 0.5, 0], output: [ -200, 0, -20 ,0] })\n          .interpolate((openValue) => `translate3d(0, ${openValue}px, 0`),\n      }}\n    >\n      <NavLinks>\n        <a onClick={handleChange} href=\"#about-me\">Sobre mí</a>\n        <a onClick={handleChange} href=\"#experience\">Experiencia laboral</a>\n        {/* <a onClick={handleChange} href=\"#blog\">Proyectos</a> */}\n        <a onClick={handleChange} href=\"#technologies\">Tecnologías</a>\n      </NavLinks>\n    </CollapseWrapper>\n  );\n};\n\nexport default CollapseMenu;\n\nconst CollapseWrapper = styled(animated.div)`\n  background: #001027;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  justify-content: center;\n  align-items: center;\n  display: flex;\n  z-index: 2;\n\n  &.hide {\n    display: none;\n  }\n`;\n\nconst NavLinks = styled.ul`\n  display: flex;\n  flex-direction: column;\n  list-style-type: none;\n  padding: 0;\n  transition: 0.3s;\n  align-items: center;\n  & a {\n    transition: all 300ms linear 0s;\n    font-size: 2rem;\n    line-height: 2;\n    color: #dfe6e9;\n    text-transform: uppercase;\n    text-decoration: none;\n    cursor: pointer;\n    transition: 0.3s;\n    &:hover {\n      color: black;\n      transform: scale(1.1);\n    }\n\n    @media (max-width: 768px) {\n      font-size: 20px;\n    }\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useSpring, animated } from \"react-spring\";\nimport { Link } from \"react-router-dom\";\nimport BurgerMenu from \"./BurgerMenu\";\nimport CollapseMenu from \"./CollapseMenu\";\n\nconst Navbar = (props) => {\n  function handleChange() {\n    props.onChange();\n  }\n\n  const barAnimation = useSpring({\n    from: { transform: \"translate3d(0, -10rem, 0)\" },\n    transform: \"translate3d(0, 0, 0)\",\n  });\n\n  return (\n    <>\n      <CollapseMenu navbarState={props.navbarState} onChange={handleChange} />\n      <NavBar className={`${props.navbarState ? \"open\" : \"\"} ${ !!props.scroll ? \"sticky\" : \"\"}`} style={barAnimation}>\n        <FlexContainer className={`${props.navbarState ? \"open\" : \"\"} ${ !!props.scroll ? \"sticky\" : \"\"}`}>\n        <Logo className={`${props.navbarState ? \"open\" : \"\"} ${!!props.scroll ? \"sticky\" : \"\"}`}>Nicolás</Logo>\n          <NavList className={`${props.navbarState ? \"open\" : \"\"} ${!!props.scroll ? \"sticky\" : \"\"}`}>\n            <a href=\"#about-me\">Sobre mí</a>\n            <a href=\"#experience\">Experiencia laboral</a>\n            {/* <Link to=\"#tecnologi\">Proyectos</Link> */}\n            <a href=\"#technologies\">Tecnologías</a>\n          </NavList>\n          <BurgerWrapper>\n            <BurgerMenu\n              scrollClass={`${!!props.scroll ? \"sticky\" : \"\"}`}\n              navbarState={props.navbarState}\n              onChange={handleChange}\n            />\n          </BurgerWrapper>\n        </FlexContainer>\n      </NavBar>\n    </>\n  );\n};\n\nexport default Navbar;\n\nconst NavBar = styled(animated.nav)`\n  position: fixed;\n  width: 100%;\n  top: 0;\n  left: 0;\n  z-index: 3;\n  font-size: 1.4rem;\n  height: 8vh;\n  transition: 1s;\n  background: transparent;\n  padding: 0;\n  margin: auto;\n  &.sticky.open {\n    background: transparent;\n  }\n`;\n\nconst FlexContainer = styled.div`\n  display: flex;\n  margin: auto;\n  padding: 0 2rem;\n  justify-content: space-between;\n  align-items: center;\n  height: 5rem;\n  background: white;\n  background: transparent;\n  transition: 0.3s;\n  &.sticky:not(.open) {\n    background: white;\n    justify-content: space-between;\n  }\n  &.sticky.open {\n    background: transparent;\n  }\n  @media (max-width: 768px) {\n    justify-content: flex-end;\n    &.open {\n      justify-content: space-between;\n    }  \n    &.sticky {\n      justify-content: space-between;\n    }\n  }\n`;\n\nconst BurgerWrapper = styled.div`\n  margin: auto 0;\n`;\n\nconst Logo = styled.h1`\n{\n  display: none;\n  color: #001027;\n  &.sticky {\n    display:flex;\n  }\n  &.open {\n    display:flex;\n    color: white;\n  }\n}  \n\n`;\n\nconst NavList = styled.ul`\n   {\n    display: flex;\n    flex-grow: 1;\n    justify-content: center;\n    &.open {\n      display: none;\n    }\n    &.sticky {\n      display: none;\n    }\n    a {\n      margin: 0 1em;\n      color: white;\n      text-decoration: none;\n      transition: 0.2s;\n      &:hover {\n        text-shadow: 3px -2px 0px #4f7dff;\n        transform: scale(1.01);\n      }\n    }\n\n    @media (max-width: 768px) {\n      display: none;\n    }\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nconst fondito = require(\"../Assets/img/fondito.jpg\");\nconst bob = require(\"../Assets/img/bob.gif\");\n\nconst Home = () => {\n  return (\n    <FlexContainerColumn>\n      <Title>Página en construcción</Title>\n      <Subtitle>Estoy trabajando en esta web, va a quedar joya.</Subtitle>\n      <Img src={bob}></Img>\n    </FlexContainerColumn>\n  );\n};\nexport default Home;\n\nconst FlexContainerColumn = styled.div`\n   {\n    display: flex;\n    flex-direction: column;\n    height: 100vh;\n    width: 100%;\n    background: blue;\n    justify-content: center;\n    align-items: center;\n    background-image: url(${fondito});\n  }\n`;\n\nconst Title = styled.h1`\n   {\n    font-size: 5em;\n    color: white;\n    transition: 0.4s;\n    &:hover {\n      transform: scale(1.3);\n    }\n  }\n`;\n\nconst Subtitle = styled.h2`\n   {\n    font-size: 2em;\n    color: white;\n    font-weight: normal;\n    transition: 0.4s;\n    &:hover {\n      transform: scale(1.3);\n    }\n  }\n`;\n\nconst Img = styled.img`\n   {\n    width: 20%;\n  }\n`;\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Navbar from \"./Common/Navbar/Navbar\";\nimport Home from \"./Common/home.js\";\n\nconst App = () => {\n  const [navbarOpen, setNavbarOpen] = useState(false);\n  const scroll = useHasScrolled(100);\n\n  const handleChange = () => {\n    setNavbarOpen(!navbarOpen);\n  };\n\n  return <Home />;\n};\nexport default App;\n\nexport const useHasScrolled = (distance = 10) => {\n  const [scroll, setScroll] = useState(false);\n\n  useEffect(() => {\n    const onScroll = () => {\n      const scrollCheck = window.scrollY >= distance;\n      if (scrollCheck !== scroll) {\n        setScroll(scrollCheck);\n      }\n    };\n\n    document.addEventListener(\"scroll\", onScroll);\n\n    return () => {\n      document.removeEventListener(\"scroll\", onScroll);\n    };\n  }, [scroll, setScroll, distance]);\n\n  return scroll;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}