var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./pathseg", "./Options/Classes/PolygonMask", "./PolygonMaskInstance", "./Enums/PolygonMaskInlineArrangement", "./Enums/PolygonMaskMoveType", "./Enums/PolygonMaskType", "./Options/Interfaces/IPolygonMaskOptions"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadPolygonMaskPlugin = void 0;
    require("./pathseg");
    const PolygonMask_1 = require("./Options/Classes/PolygonMask");
    const PolygonMaskInstance_1 = require("./PolygonMaskInstance");
    class PolygonMaskPlugin {
        constructor(engine) {
            this.id = "polygonMask";
            this._engine = engine;
        }
        getPlugin(container) {
            return new PolygonMaskInstance_1.PolygonMaskInstance(container, this._engine);
        }
        loadOptions(options, source) {
            if (!this.needsPlugin(source)) {
                return;
            }
            const optionsCast = options;
            let polygonOptions = optionsCast.polygon;
            if ((polygonOptions === null || polygonOptions === void 0 ? void 0 : polygonOptions.load) === undefined) {
                optionsCast.polygon = polygonOptions = new PolygonMask_1.PolygonMask();
            }
            polygonOptions.load(source === null || source === void 0 ? void 0 : source.polygon);
        }
        needsPlugin(options) {
            var _a, _b, _c;
            return ((_b = (_a = options === null || options === void 0 ? void 0 : options.polygon) === null || _a === void 0 ? void 0 : _a.enable) !== null && _b !== void 0 ? _b : (((_c = options === null || options === void 0 ? void 0 : options.polygon) === null || _c === void 0 ? void 0 : _c.type) !== undefined && options.polygon.type !== "none"));
        }
    }
    async function loadPolygonMaskPlugin(engine) {
        const plugin = new PolygonMaskPlugin(engine);
        await engine.addPlugin(plugin);
    }
    exports.loadPolygonMaskPlugin = loadPolygonMaskPlugin;
    __exportStar(require("./Enums/PolygonMaskInlineArrangement"), exports);
    __exportStar(require("./Enums/PolygonMaskMoveType"), exports);
    __exportStar(require("./Enums/PolygonMaskType"), exports);
    __exportStar(require("./Options/Interfaces/IPolygonMaskOptions"), exports);
});
