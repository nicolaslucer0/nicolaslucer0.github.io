{"ast":null,"code":"import { drawLinkLine, drawLinkTriangle } from \"./Utils\";\nimport { getDistance, getLinkColor, getRandom, getRangeValue, rangeColorToRgb } from \"tsparticles-engine\";\nexport class LinkInstance {\n  constructor(container) {\n    this.container = container;\n  }\n\n  drawParticle(context, particle) {\n    var _a;\n\n    const container = this.container,\n          pOptions = particle.options;\n\n    if (!particle.links || particle.links.length <= 0) {\n      return;\n    }\n\n    context.save();\n    const p1Links = particle.links.filter(l => pOptions.links && container.particles.getLinkFrequency(particle, l.destination) <= pOptions.links.frequency);\n\n    for (const link of p1Links) {\n      this.drawTriangles(container, pOptions, particle, link, p1Links);\n\n      if (link.opacity > 0 && ((_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : 0) > 0) {\n        this.drawLinkLine(particle, link);\n      }\n    }\n\n    context.restore();\n  }\n\n  particleCreated(particle) {\n    particle.links = [];\n\n    if (!particle.options.links) {\n      return;\n    }\n\n    const ratio = this.container.retina.pixelRatio;\n    particle.retina.linksDistance = particle.options.links.distance * ratio;\n    particle.retina.linksWidth = particle.options.links.width * ratio;\n  }\n\n  particleDestroyed(particle) {\n    particle.links = [];\n  }\n\n  drawLinkLine(p1, link) {\n    const container = this.container,\n          options = container.actualOptions,\n          p2 = link.destination,\n          pos1 = p1.getPosition(),\n          pos2 = p2.getPosition();\n    let opacity = link.opacity;\n    container.canvas.draw(ctx => {\n      var _a, _b, _c;\n\n      if (!p1.options.links) {\n        return;\n      }\n\n      let colorLine;\n      const twinkle = (_a = p1.options.twinkle) === null || _a === void 0 ? void 0 : _a.lines;\n\n      if (twinkle === null || twinkle === void 0 ? void 0 : twinkle.enable) {\n        const twinkleFreq = twinkle.frequency,\n              twinkleRgb = rangeColorToRgb(twinkle.color),\n              twinkling = getRandom() < twinkleFreq;\n\n        if (twinkling && twinkleRgb) {\n          colorLine = twinkleRgb;\n          opacity = getRangeValue(twinkle.opacity);\n        }\n      }\n\n      if (!colorLine) {\n        const linksOptions = p1.options.links,\n              linkColor = (linksOptions === null || linksOptions === void 0 ? void 0 : linksOptions.id) !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n        colorLine = getLinkColor(p1, p2, linkColor);\n      }\n\n      if (!colorLine) {\n        return;\n      }\n\n      const width = (_b = p1.retina.linksWidth) !== null && _b !== void 0 ? _b : 0,\n            maxDistance = (_c = p1.retina.linksDistance) !== null && _c !== void 0 ? _c : 0;\n      drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.options.links.warp, options.backgroundMask.enable, options.backgroundMask.composite, colorLine, opacity, p1.options.links.shadow);\n    });\n  }\n\n  drawLinkTriangle(p1, link1, link2) {\n    var _a;\n\n    if (!p1.options.links) {\n      return;\n    }\n\n    const container = this.container,\n          options = container.actualOptions,\n          p2 = link1.destination,\n          p3 = link2.destination,\n          triangleOptions = p1.options.links.triangles,\n          opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n\n    if (opacityTriangle <= 0) {\n      return;\n    }\n\n    container.canvas.draw(ctx => {\n      var _a;\n\n      const pos1 = p1.getPosition(),\n            pos2 = p2.getPosition(),\n            pos3 = p3.getPosition(),\n            linksDistance = (_a = p1.retina.linksDistance) !== null && _a !== void 0 ? _a : 0;\n\n      if (getDistance(pos1, pos2) > linksDistance || getDistance(pos3, pos2) > linksDistance || getDistance(pos3, pos1) > linksDistance) {\n        return;\n      }\n\n      let colorTriangle = rangeColorToRgb(triangleOptions.color);\n\n      if (!colorTriangle) {\n        const linksOptions = p1.options.links,\n              linkColor = (linksOptions === null || linksOptions === void 0 ? void 0 : linksOptions.id) !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n        colorTriangle = getLinkColor(p1, p2, linkColor);\n      }\n\n      if (!colorTriangle) {\n        return;\n      }\n\n      drawLinkTriangle(ctx, pos1, pos2, pos3, options.backgroundMask.enable, options.backgroundMask.composite, colorTriangle, opacityTriangle);\n    });\n  }\n\n  drawTriangles(container, options, p1, link, p1Links) {\n    var _a, _b, _c;\n\n    const p2 = link.destination,\n          particles = container.particles;\n\n    if (!(((_a = options.links) === null || _a === void 0 ? void 0 : _a.triangles.enable) && ((_b = p2.options.links) === null || _b === void 0 ? void 0 : _b.triangles.enable))) {\n      return;\n    }\n\n    const vertices = (_c = p2.links) === null || _c === void 0 ? void 0 : _c.filter(t => {\n      const linkFreq = container.particles.getLinkFrequency(p2, t.destination);\n      return p2.options.links && linkFreq <= p2.options.links.frequency && p1Links.findIndex(l => l.destination === t.destination) >= 0;\n    });\n\n    if (!(vertices === null || vertices === void 0 ? void 0 : vertices.length)) {\n      return;\n    }\n\n    for (const vertex of vertices) {\n      const p3 = vertex.destination,\n            triangleFreq = particles.getTriangleFrequency(p1, p2, p3);\n\n      if (triangleFreq > options.links.triangles.frequency) {\n        continue;\n      }\n\n      this.drawLinkTriangle(p1, link, vertex);\n    }\n  }\n\n}","map":{"version":3,"names":["drawLinkLine","drawLinkTriangle","getDistance","getLinkColor","getRandom","getRangeValue","rangeColorToRgb","LinkInstance","constructor","container","drawParticle","context","particle","_a","pOptions","options","links","length","save","p1Links","filter","l","particles","getLinkFrequency","destination","frequency","link","drawTriangles","opacity","retina","linksWidth","restore","particleCreated","ratio","pixelRatio","linksDistance","distance","width","particleDestroyed","p1","actualOptions","p2","pos1","getPosition","pos2","canvas","draw","ctx","_b","_c","colorLine","twinkle","lines","enable","twinkleFreq","twinkleRgb","color","twinkling","linksOptions","linkColor","id","undefined","linksColors","get","linksColor","maxDistance","size","warp","backgroundMask","composite","shadow","link1","link2","p3","triangleOptions","triangles","opacityTriangle","pos3","colorTriangle","vertices","t","linkFreq","findIndex","vertex","triangleFreq","getTriangleFrequency"],"sources":["/home/nicolas/Development/personal/react/nicolaslucer0.github.io/react/node_modules/tsparticles-interaction-particles-links/esm/LinkInstance.js"],"sourcesContent":["import { drawLinkLine, drawLinkTriangle } from \"./Utils\";\nimport { getDistance, getLinkColor, getRandom, getRangeValue, rangeColorToRgb } from \"tsparticles-engine\";\nexport class LinkInstance {\n    constructor(container) {\n        this.container = container;\n    }\n    drawParticle(context, particle) {\n        var _a;\n        const container = this.container, pOptions = particle.options;\n        if (!particle.links || particle.links.length <= 0) {\n            return;\n        }\n        context.save();\n        const p1Links = particle.links.filter((l) => pOptions.links &&\n            container.particles.getLinkFrequency(particle, l.destination) <= pOptions.links.frequency);\n        for (const link of p1Links) {\n            this.drawTriangles(container, pOptions, particle, link, p1Links);\n            if (link.opacity > 0 && ((_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : 0) > 0) {\n                this.drawLinkLine(particle, link);\n            }\n        }\n        context.restore();\n    }\n    particleCreated(particle) {\n        particle.links = [];\n        if (!particle.options.links) {\n            return;\n        }\n        const ratio = this.container.retina.pixelRatio;\n        particle.retina.linksDistance = particle.options.links.distance * ratio;\n        particle.retina.linksWidth = particle.options.links.width * ratio;\n    }\n    particleDestroyed(particle) {\n        particle.links = [];\n    }\n    drawLinkLine(p1, link) {\n        const container = this.container, options = container.actualOptions, p2 = link.destination, pos1 = p1.getPosition(), pos2 = p2.getPosition();\n        let opacity = link.opacity;\n        container.canvas.draw((ctx) => {\n            var _a, _b, _c;\n            if (!p1.options.links) {\n                return;\n            }\n            let colorLine;\n            const twinkle = (_a = p1.options.twinkle) === null || _a === void 0 ? void 0 : _a.lines;\n            if (twinkle === null || twinkle === void 0 ? void 0 : twinkle.enable) {\n                const twinkleFreq = twinkle.frequency, twinkleRgb = rangeColorToRgb(twinkle.color), twinkling = getRandom() < twinkleFreq;\n                if (twinkling && twinkleRgb) {\n                    colorLine = twinkleRgb;\n                    opacity = getRangeValue(twinkle.opacity);\n                }\n            }\n            if (!colorLine) {\n                const linksOptions = p1.options.links, linkColor = (linksOptions === null || linksOptions === void 0 ? void 0 : linksOptions.id) !== undefined\n                    ? container.particles.linksColors.get(linksOptions.id)\n                    : container.particles.linksColor;\n                colorLine = getLinkColor(p1, p2, linkColor);\n            }\n            if (!colorLine) {\n                return;\n            }\n            const width = (_b = p1.retina.linksWidth) !== null && _b !== void 0 ? _b : 0, maxDistance = (_c = p1.retina.linksDistance) !== null && _c !== void 0 ? _c : 0;\n            drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.options.links.warp, options.backgroundMask.enable, options.backgroundMask.composite, colorLine, opacity, p1.options.links.shadow);\n        });\n    }\n    drawLinkTriangle(p1, link1, link2) {\n        var _a;\n        if (!p1.options.links) {\n            return;\n        }\n        const container = this.container, options = container.actualOptions, p2 = link1.destination, p3 = link2.destination, triangleOptions = p1.options.links.triangles, opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n        if (opacityTriangle <= 0) {\n            return;\n        }\n        container.canvas.draw((ctx) => {\n            var _a;\n            const pos1 = p1.getPosition(), pos2 = p2.getPosition(), pos3 = p3.getPosition(), linksDistance = (_a = p1.retina.linksDistance) !== null && _a !== void 0 ? _a : 0;\n            if (getDistance(pos1, pos2) > linksDistance ||\n                getDistance(pos3, pos2) > linksDistance ||\n                getDistance(pos3, pos1) > linksDistance) {\n                return;\n            }\n            let colorTriangle = rangeColorToRgb(triangleOptions.color);\n            if (!colorTriangle) {\n                const linksOptions = p1.options.links, linkColor = (linksOptions === null || linksOptions === void 0 ? void 0 : linksOptions.id) !== undefined\n                    ? container.particles.linksColors.get(linksOptions.id)\n                    : container.particles.linksColor;\n                colorTriangle = getLinkColor(p1, p2, linkColor);\n            }\n            if (!colorTriangle) {\n                return;\n            }\n            drawLinkTriangle(ctx, pos1, pos2, pos3, options.backgroundMask.enable, options.backgroundMask.composite, colorTriangle, opacityTriangle);\n        });\n    }\n    drawTriangles(container, options, p1, link, p1Links) {\n        var _a, _b, _c;\n        const p2 = link.destination, particles = container.particles;\n        if (!(((_a = options.links) === null || _a === void 0 ? void 0 : _a.triangles.enable) && ((_b = p2.options.links) === null || _b === void 0 ? void 0 : _b.triangles.enable))) {\n            return;\n        }\n        const vertices = (_c = p2.links) === null || _c === void 0 ? void 0 : _c.filter((t) => {\n            const linkFreq = container.particles.getLinkFrequency(p2, t.destination);\n            return (p2.options.links &&\n                linkFreq <= p2.options.links.frequency &&\n                p1Links.findIndex((l) => l.destination === t.destination) >= 0);\n        });\n        if (!(vertices === null || vertices === void 0 ? void 0 : vertices.length)) {\n            return;\n        }\n        for (const vertex of vertices) {\n            const p3 = vertex.destination, triangleFreq = particles.getTriangleFrequency(p1, p2, p3);\n            if (triangleFreq > options.links.triangles.frequency) {\n                continue;\n            }\n            this.drawLinkTriangle(p1, link, vertex);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}