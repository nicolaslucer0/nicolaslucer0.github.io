{"ast":null,"code":"import { executeOnSingleOrMultiple, isInArray } from \"tsparticles-engine\";\nimport { CircleShape } from \"./Shapes/Circle/CircleShape\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { Emitters } from \"./Emitters\";\nimport { ShapeManager } from \"./ShapeManager\";\nimport { SquareShape } from \"./Shapes/Square/SquareShape\";\n\nclass EmittersPlugin {\n  constructor(engine) {\n    this._engine = engine;\n    this.id = \"emitters\";\n  }\n\n  getPlugin(container) {\n    return new Emitters(this._engine, container);\n  }\n\n  loadOptions(options, source) {\n    var _a, _b, _c, _d, _e, _f;\n\n    if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n      return;\n    }\n\n    const optionsCast = options;\n    optionsCast.emitters = executeOnSingleOrMultiple(source === null || source === void 0 ? void 0 : source.emitters, emitter => {\n      const tmp = new Emitter();\n      tmp.load(emitter);\n      return tmp;\n    });\n    const interactivityEmitters = (_b = (_a = source === null || source === void 0 ? void 0 : source.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.emitters;\n\n    if (interactivityEmitters) {\n      if (interactivityEmitters instanceof Array) {\n        optionsCast.interactivity.modes.emitters = {\n          random: {\n            count: 1,\n            enable: true\n          },\n          value: interactivityEmitters.map(s => {\n            const tmp = new Emitter();\n            tmp.load(s);\n            return tmp;\n          })\n        };\n      } else {\n        const emitterMode = interactivityEmitters;\n\n        if (emitterMode.value !== undefined) {\n          if (emitterMode.value instanceof Array) {\n            optionsCast.interactivity.modes.emitters = {\n              random: {\n                count: (_c = emitterMode.random.count) !== null && _c !== void 0 ? _c : 1,\n                enable: (_d = emitterMode.random.enable) !== null && _d !== void 0 ? _d : false\n              },\n              value: emitterMode.value.map(s => {\n                const tmp = new Emitter();\n                tmp.load(s);\n                return tmp;\n              })\n            };\n          } else {\n            const tmp = new Emitter();\n            tmp.load(emitterMode.value);\n            optionsCast.interactivity.modes.emitters = {\n              random: {\n                count: (_e = emitterMode.random.count) !== null && _e !== void 0 ? _e : 1,\n                enable: (_f = emitterMode.random.enable) !== null && _f !== void 0 ? _f : false\n              },\n              value: tmp\n            };\n          }\n        } else {\n          const emitterOptions = optionsCast.interactivity.modes.emitters = {\n            random: {\n              count: 1,\n              enable: false\n            },\n            value: new Emitter()\n          };\n          emitterOptions.value.load(interactivityEmitters);\n        }\n      }\n    }\n  }\n\n  needsPlugin(options) {\n    var _a, _b, _c;\n\n    if (!options) {\n      return false;\n    }\n\n    const emitters = options.emitters;\n    return emitters instanceof Array && !!emitters.length || emitters !== undefined || !!((_c = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.events) === null || _b === void 0 ? void 0 : _b.onClick) === null || _c === void 0 ? void 0 : _c.mode) && isInArray(\"emitter\", options.interactivity.events.onClick.mode);\n  }\n\n}\n\nexport async function loadEmittersPlugin(engine) {\n  if (!engine.emitterShapeManager) {\n    engine.emitterShapeManager = new ShapeManager(engine);\n  }\n\n  if (!engine.addEmitterShape) {\n    engine.addEmitterShape = (name, shape) => {\n      var _a;\n\n      (_a = engine.emitterShapeManager) === null || _a === void 0 ? void 0 : _a.addShape(name, shape);\n    };\n  }\n\n  const plugin = new EmittersPlugin(engine);\n  await engine.addPlugin(plugin);\n  engine.addEmitterShape(\"circle\", new CircleShape());\n  engine.addEmitterShape(\"square\", new SquareShape());\n}\nexport * from \"./EmitterContainer\";\nexport * from \"./EmittersEngine\";\nexport * from \"./Enums/EmitterClickMode\";\nexport * from \"./Enums/EmitterShapeType\";\nexport * from \"./Options/Interfaces/IEmitterOptions\";","map":{"version":3,"names":["executeOnSingleOrMultiple","isInArray","CircleShape","Emitter","Emitters","ShapeManager","SquareShape","EmittersPlugin","constructor","engine","_engine","id","getPlugin","container","loadOptions","options","source","_a","_b","_c","_d","_e","_f","needsPlugin","optionsCast","emitters","emitter","tmp","load","interactivityEmitters","interactivity","modes","Array","random","count","enable","value","map","s","emitterMode","undefined","emitterOptions","length","events","onClick","mode","loadEmittersPlugin","emitterShapeManager","addEmitterShape","name","shape","addShape","plugin","addPlugin"],"sources":["/home/nicolas/Development/personal/react/nicolaslucer0.github.io/react/node_modules/tsparticles-plugin-emitters/esm/index.js"],"sourcesContent":["import { executeOnSingleOrMultiple, isInArray } from \"tsparticles-engine\";\nimport { CircleShape } from \"./Shapes/Circle/CircleShape\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { Emitters } from \"./Emitters\";\nimport { ShapeManager } from \"./ShapeManager\";\nimport { SquareShape } from \"./Shapes/Square/SquareShape\";\nclass EmittersPlugin {\n    constructor(engine) {\n        this._engine = engine;\n        this.id = \"emitters\";\n    }\n    getPlugin(container) {\n        return new Emitters(this._engine, container);\n    }\n    loadOptions(options, source) {\n        var _a, _b, _c, _d, _e, _f;\n        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n            return;\n        }\n        const optionsCast = options;\n        optionsCast.emitters = executeOnSingleOrMultiple(source === null || source === void 0 ? void 0 : source.emitters, (emitter) => {\n            const tmp = new Emitter();\n            tmp.load(emitter);\n            return tmp;\n        });\n        const interactivityEmitters = (_b = (_a = source === null || source === void 0 ? void 0 : source.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.emitters;\n        if (interactivityEmitters) {\n            if (interactivityEmitters instanceof Array) {\n                optionsCast.interactivity.modes.emitters = {\n                    random: {\n                        count: 1,\n                        enable: true,\n                    },\n                    value: interactivityEmitters.map((s) => {\n                        const tmp = new Emitter();\n                        tmp.load(s);\n                        return tmp;\n                    }),\n                };\n            }\n            else {\n                const emitterMode = interactivityEmitters;\n                if (emitterMode.value !== undefined) {\n                    if (emitterMode.value instanceof Array) {\n                        optionsCast.interactivity.modes.emitters = {\n                            random: {\n                                count: (_c = emitterMode.random.count) !== null && _c !== void 0 ? _c : 1,\n                                enable: (_d = emitterMode.random.enable) !== null && _d !== void 0 ? _d : false,\n                            },\n                            value: emitterMode.value.map((s) => {\n                                const tmp = new Emitter();\n                                tmp.load(s);\n                                return tmp;\n                            }),\n                        };\n                    }\n                    else {\n                        const tmp = new Emitter();\n                        tmp.load(emitterMode.value);\n                        optionsCast.interactivity.modes.emitters = {\n                            random: {\n                                count: (_e = emitterMode.random.count) !== null && _e !== void 0 ? _e : 1,\n                                enable: (_f = emitterMode.random.enable) !== null && _f !== void 0 ? _f : false,\n                            },\n                            value: tmp,\n                        };\n                    }\n                }\n                else {\n                    const emitterOptions = (optionsCast.interactivity.modes.emitters = {\n                        random: {\n                            count: 1,\n                            enable: false,\n                        },\n                        value: new Emitter(),\n                    });\n                    emitterOptions.value.load(interactivityEmitters);\n                }\n            }\n        }\n    }\n    needsPlugin(options) {\n        var _a, _b, _c;\n        if (!options) {\n            return false;\n        }\n        const emitters = options.emitters;\n        return ((emitters instanceof Array && !!emitters.length) ||\n            emitters !== undefined ||\n            (!!((_c = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.events) === null || _b === void 0 ? void 0 : _b.onClick) === null || _c === void 0 ? void 0 : _c.mode) &&\n                isInArray(\"emitter\", options.interactivity.events.onClick.mode)));\n    }\n}\nexport async function loadEmittersPlugin(engine) {\n    if (!engine.emitterShapeManager) {\n        engine.emitterShapeManager = new ShapeManager(engine);\n    }\n    if (!engine.addEmitterShape) {\n        engine.addEmitterShape = (name, shape) => {\n            var _a;\n            (_a = engine.emitterShapeManager) === null || _a === void 0 ? void 0 : _a.addShape(name, shape);\n        };\n    }\n    const plugin = new EmittersPlugin(engine);\n    await engine.addPlugin(plugin);\n    engine.addEmitterShape(\"circle\", new CircleShape());\n    engine.addEmitterShape(\"square\", new SquareShape());\n}\nexport * from \"./EmitterContainer\";\nexport * from \"./EmittersEngine\";\nexport * from \"./Enums/EmitterClickMode\";\nexport * from \"./Enums/EmitterShapeType\";\nexport * from \"./Options/Interfaces/IEmitterOptions\";\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}