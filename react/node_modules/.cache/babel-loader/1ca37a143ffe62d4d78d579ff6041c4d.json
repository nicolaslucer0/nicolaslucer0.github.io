{"ast":null,"code":"import { calcClosestPtOnSegment, drawPolygonMask, drawPolygonMaskPath, parsePaths, segmentBounce } from \"./utils\";\nimport { deepExtend, getDistance, getDistances, getRandom, itemFromArray } from \"tsparticles-engine\";\nimport { PolygonMask } from \"./Options/Classes/PolygonMask\";\nconst noPolygonDataLoaded = \"No polygon data loaded.\",\n      noPolygonFound = \"No polygon found, you need to specify SVG url in config.\";\nexport class PolygonMaskInstance {\n  constructor(container, engine) {\n    this._container = container;\n    this._engine = engine;\n    this.dimension = {\n      height: 0,\n      width: 0\n    };\n    this.path2DSupported = !!window.Path2D;\n    this.options = new PolygonMask();\n    this._polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n  }\n\n  clickPositionValid(position) {\n    const options = this.options;\n    return options.enable && options.type !== \"none\" && options.type !== \"inline\" && this.checkInsidePolygon(position);\n  }\n\n  draw(context) {\n    var _a;\n\n    if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      return;\n    }\n\n    const options = this.options,\n          polygonDraw = options.draw;\n\n    if (!options.enable || !polygonDraw.enable) {\n      return;\n    }\n\n    const rawData = this.raw;\n\n    for (const path of this.paths) {\n      const path2d = path.path2d,\n            path2dSupported = this.path2DSupported;\n\n      if (!context) {\n        continue;\n      }\n\n      if (path2dSupported && path2d && this.offset) {\n        drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n      } else if (rawData) {\n        drawPolygonMask(context, rawData, polygonDraw.stroke);\n      }\n    }\n  }\n\n  async initAsync(options) {\n    this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n    const polygonMaskOptions = this.options;\n    this._polygonMaskMoveRadius = polygonMaskOptions.move.radius * this._container.retina.pixelRatio;\n\n    if (polygonMaskOptions.enable) {\n      await this.initRawData();\n    }\n  }\n\n  particleBounce(particle, delta, direction) {\n    return this.polygonBounce(particle, delta, direction);\n  }\n\n  particlePosition(position) {\n    var _a, _b;\n\n    const options = this.options;\n\n    if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n      return;\n    }\n\n    return deepExtend({}, position ? position : this.randomPoint());\n  }\n\n  particlesInitialization() {\n    const options = this.options;\n\n    if (options.enable && options.type === \"inline\" && (options.inline.arrangement === \"one-per-point\" || options.inline.arrangement === \"per-point\")) {\n      this.drawPoints();\n      return true;\n    }\n\n    return false;\n  }\n\n  resize() {\n    const container = this._container,\n          options = this.options;\n\n    if (!(options.enable && options.type !== \"none\")) {\n      return;\n    }\n\n    if (this.redrawTimeout) {\n      clearTimeout(this.redrawTimeout);\n    }\n\n    this.redrawTimeout = window.setTimeout(async () => {\n      await this.initRawData(true);\n      await container.particles.redraw();\n    }, 250);\n  }\n\n  stop() {\n    delete this.raw;\n    delete this.paths;\n  }\n\n  checkInsidePolygon(position) {\n    var _a, _b;\n\n    const container = this._container,\n          options = this.options;\n\n    if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n      return true;\n    }\n\n    if (!this.raw) {\n      throw new Error(noPolygonFound);\n    }\n\n    const canvasSize = container.canvas.size,\n          x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : getRandom() * canvasSize.width,\n          y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : getRandom() * canvasSize.height;\n    let inside = false;\n\n    for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n      const pi = this.raw[i],\n            pj = this.raw[j],\n            intersect = pi.y > y !== pj.y > y && x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;\n\n      if (intersect) {\n        inside = !inside;\n      }\n    }\n\n    return options.type === \"inside\" ? inside : options.type === \"outside\" ? !inside : false;\n  }\n\n  createPath2D() {\n    var _a, _b;\n\n    const options = this.options;\n\n    if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      return;\n    }\n\n    for (const path of this.paths) {\n      const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n\n      if (pathData) {\n        const path2d = new Path2D(pathData),\n              matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix(),\n              finalPath = new Path2D(),\n              transform = matrix.scale(options.scale);\n\n        if (finalPath.addPath) {\n          finalPath.addPath(path2d, transform);\n          path.path2d = finalPath;\n        } else {\n          delete path.path2d;\n        }\n      } else {\n        delete path.path2d;\n      }\n\n      if (path.path2d || !this.raw) {\n        continue;\n      }\n\n      path.path2d = new Path2D();\n      path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n      this.raw.forEach((pos, i) => {\n        var _a;\n\n        if (i > 0) {\n          (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n        }\n      });\n      path.path2d.closePath();\n    }\n  }\n\n  async downloadSvgPath(svgUrl, force) {\n    const options = this.options,\n          url = svgUrl || options.url,\n          forceDownload = force !== null && force !== void 0 ? force : false;\n\n    if (!url || this.paths !== undefined && !forceDownload) {\n      return this.raw;\n    }\n\n    const req = await fetch(url);\n\n    if (!req.ok) {\n      throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n    }\n\n    return this.parseSvgPath(await req.text(), force);\n  }\n\n  drawPoints() {\n    if (!this.raw) {\n      return;\n    }\n\n    for (const item of this.raw) {\n      this._container.particles.addParticle({\n        x: item.x,\n        y: item.y\n      });\n    }\n  }\n\n  getEquidistantPointByIndex(index) {\n    var _a, _b, _c, _d, _e, _f, _g;\n\n    const options = this._container.actualOptions,\n          polygonMaskOptions = this.options;\n    if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(noPolygonDataLoaded);\n    let offset = 0,\n        point;\n    const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0),\n          distance = totalLength / options.particles.number.value;\n\n    for (const path of this.paths) {\n      const pathDistance = distance * index - offset;\n\n      if (pathDistance <= path.length) {\n        point = path.element.getPointAtLength(pathDistance);\n        break;\n      } else {\n        offset += path.length;\n      }\n    }\n\n    return {\n      x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n      y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0)\n    };\n  }\n\n  getPointByIndex(index) {\n    if (!this.raw || !this.raw.length) {\n      throw new Error(noPolygonDataLoaded);\n    }\n\n    const coords = this.raw[index % this.raw.length];\n    return {\n      x: coords.x,\n      y: coords.y\n    };\n  }\n\n  getRandomPoint() {\n    if (!this.raw || !this.raw.length) {\n      throw new Error(noPolygonDataLoaded);\n    }\n\n    const coords = itemFromArray(this.raw);\n    return {\n      x: coords.x,\n      y: coords.y\n    };\n  }\n\n  getRandomPointByLength() {\n    var _a, _b, _c;\n\n    const options = this.options;\n\n    if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      throw new Error(noPolygonDataLoaded);\n    }\n\n    const path = itemFromArray(this.paths),\n          distance = Math.floor(getRandom() * path.length) + 1,\n          point = path.element.getPointAtLength(distance);\n    return {\n      x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n      y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0)\n    };\n  }\n\n  async initRawData(force) {\n    const options = this.options;\n\n    if (options.url) {\n      this.raw = await this.downloadSvgPath(options.url, force);\n    } else if (options.data) {\n      const data = options.data;\n      let svg;\n\n      if (typeof data !== \"string\") {\n        const path = data.path instanceof Array ? data.path.map(t => `<path d=\"${t}\" />`).join(\"\") : `<path d=\"${data.path}\" />`;\n        const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n        svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n      } else {\n        svg = data;\n      }\n\n      this.raw = this.parseSvgPath(svg, force);\n    }\n\n    this.createPath2D();\n\n    this._engine.dispatchEvent(\"polygonMaskLoaded\", {\n      container: this._container\n    });\n  }\n\n  parseSvgPath(xml, force) {\n    var _a, _b, _c;\n\n    const forceDownload = force !== null && force !== void 0 ? force : false;\n\n    if (this.paths !== undefined && !forceDownload) {\n      return this.raw;\n    }\n\n    const container = this._container,\n          options = this.options,\n          parser = new DOMParser(),\n          doc = parser.parseFromString(xml, \"image/svg+xml\"),\n          svg = doc.getElementsByTagName(\"svg\")[0];\n    let svgPaths = svg.getElementsByTagName(\"path\");\n\n    if (!svgPaths.length) {\n      svgPaths = doc.getElementsByTagName(\"path\");\n    }\n\n    this.paths = [];\n\n    for (let i = 0; i < svgPaths.length; i++) {\n      const path = svgPaths.item(i);\n\n      if (path) {\n        this.paths.push({\n          element: path,\n          length: path.getTotalLength()\n        });\n      }\n    }\n\n    const pxRatio = container.retina.pixelRatio,\n          scale = options.scale / pxRatio;\n    this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n    this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n    const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n      x: 50,\n      y: 50\n    };\n    this.offset = {\n      x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n      y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n    };\n    return parsePaths(this.paths, scale, this.offset);\n  }\n\n  polygonBounce(particle, _delta, direction) {\n    const options = this.options;\n\n    if (!this.raw || !options.enable || direction !== \"top\") {\n      return false;\n    }\n\n    if (options.type === \"inside\" || options.type === \"outside\") {\n      let closest, dx, dy;\n      const pos = particle.getPosition(),\n            radius = particle.getRadius();\n\n      for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n        const pi = this.raw[i],\n              pj = this.raw[j];\n        closest = calcClosestPtOnSegment(pi, pj, pos);\n        const dist = getDistances(pos, closest);\n        [dx, dy] = [dist.dx, dist.dy];\n\n        if (dist.distance < radius) {\n          segmentBounce(pi, pj, particle.velocity);\n          return true;\n        }\n      }\n\n      if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n        const factor = {\n          x: 1,\n          y: 1\n        };\n\n        if (particle.position.x >= closest.x) {\n          factor.x = -1;\n        }\n\n        if (particle.position.y >= closest.y) {\n          factor.y = -1;\n        }\n\n        particle.position.x = closest.x + radius * 2 * factor.x;\n        particle.position.y = closest.y + radius * 2 * factor.y;\n        particle.velocity.mult(-1);\n        return true;\n      }\n    } else if (options.type === \"inline\" && particle.initialPosition) {\n      const dist = getDistance(particle.initialPosition, particle.getPosition());\n\n      if (dist > this._polygonMaskMoveRadius) {\n        particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  randomPoint() {\n    const container = this._container,\n          options = this.options;\n    let position;\n\n    if (options.type === \"inline\") {\n      switch (options.inline.arrangement) {\n        case \"random-point\":\n          position = this.getRandomPoint();\n          break;\n\n        case \"random-length\":\n          position = this.getRandomPointByLength();\n          break;\n\n        case \"equidistant\":\n          position = this.getEquidistantPointByIndex(container.particles.count);\n          break;\n\n        case \"one-per-point\":\n        case \"per-point\":\n        default:\n          position = this.getPointByIndex(container.particles.count);\n      }\n    } else {\n      position = {\n        x: getRandom() * container.canvas.size.width,\n        y: getRandom() * container.canvas.size.height\n      };\n    }\n\n    if (this.checkInsidePolygon(position)) {\n      return position;\n    } else {\n      return this.randomPoint();\n    }\n  }\n\n}","map":{"version":3,"names":["calcClosestPtOnSegment","drawPolygonMask","drawPolygonMaskPath","parsePaths","segmentBounce","deepExtend","getDistance","getDistances","getRandom","itemFromArray","PolygonMask","noPolygonDataLoaded","noPolygonFound","PolygonMaskInstance","constructor","container","engine","_container","_engine","dimension","height","width","path2DSupported","window","Path2D","options","_polygonMaskMoveRadius","move","radius","retina","pixelRatio","clickPositionValid","position","enable","type","checkInsidePolygon","draw","context","_a","paths","length","polygonDraw","rawData","raw","path","path2d","path2dSupported","offset","stroke","initAsync","load","polygon","polygonMaskOptions","initRawData","particleBounce","particle","delta","direction","polygonBounce","particlePosition","_b","randomPoint","particlesInitialization","inline","arrangement","drawPoints","resize","redrawTimeout","clearTimeout","setTimeout","particles","redraw","stop","Error","canvasSize","canvas","size","x","y","inside","i","j","pi","pj","intersect","createPath2D","pathData","element","getAttribute","matrix","document","createElementNS","createSVGMatrix","finalPath","transform","scale","addPath","moveTo","forEach","pos","lineTo","closePath","downloadSvgPath","svgUrl","force","url","forceDownload","undefined","req","fetch","ok","parseSvgPath","text","item","addParticle","getEquidistantPointByIndex","index","_c","_d","_e","_f","_g","actualOptions","point","totalLength","reduce","tot","distance","number","value","pathDistance","getPointAtLength","getPointByIndex","coords","getRandomPoint","getRandomPointByLength","Math","floor","data","svg","Array","map","t","join","namespaces","dispatchEvent","xml","parser","DOMParser","doc","parseFromString","getElementsByTagName","svgPaths","push","getTotalLength","pxRatio","parseFloat","_delta","closest","dx","dy","getPosition","getRadius","dist","velocity","factor","mult","initialPosition","count"],"sources":["/home/nicolas/Development/personal/react/nicolaslucer0.github.io/react/node_modules/tsparticles-plugin-polygon-mask/esm/PolygonMaskInstance.js"],"sourcesContent":["import { calcClosestPtOnSegment, drawPolygonMask, drawPolygonMaskPath, parsePaths, segmentBounce } from \"./utils\";\nimport { deepExtend, getDistance, getDistances, getRandom, itemFromArray } from \"tsparticles-engine\";\nimport { PolygonMask } from \"./Options/Classes/PolygonMask\";\nconst noPolygonDataLoaded = \"No polygon data loaded.\", noPolygonFound = \"No polygon found, you need to specify SVG url in config.\";\nexport class PolygonMaskInstance {\n    constructor(container, engine) {\n        this._container = container;\n        this._engine = engine;\n        this.dimension = {\n            height: 0,\n            width: 0,\n        };\n        this.path2DSupported = !!window.Path2D;\n        this.options = new PolygonMask();\n        this._polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n    }\n    clickPositionValid(position) {\n        const options = this.options;\n        return (options.enable &&\n            options.type !== \"none\" &&\n            options.type !== \"inline\" &&\n            this.checkInsidePolygon(position));\n    }\n    draw(context) {\n        var _a;\n        if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        const options = this.options, polygonDraw = options.draw;\n        if (!options.enable || !polygonDraw.enable) {\n            return;\n        }\n        const rawData = this.raw;\n        for (const path of this.paths) {\n            const path2d = path.path2d, path2dSupported = this.path2DSupported;\n            if (!context) {\n                continue;\n            }\n            if (path2dSupported && path2d && this.offset) {\n                drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n            }\n            else if (rawData) {\n                drawPolygonMask(context, rawData, polygonDraw.stroke);\n            }\n        }\n    }\n    async initAsync(options) {\n        this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n        const polygonMaskOptions = this.options;\n        this._polygonMaskMoveRadius = polygonMaskOptions.move.radius * this._container.retina.pixelRatio;\n        if (polygonMaskOptions.enable) {\n            await this.initRawData();\n        }\n    }\n    particleBounce(particle, delta, direction) {\n        return this.polygonBounce(particle, delta, direction);\n    }\n    particlePosition(position) {\n        var _a, _b;\n        const options = this.options;\n        if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n            return;\n        }\n        return deepExtend({}, position ? position : this.randomPoint());\n    }\n    particlesInitialization() {\n        const options = this.options;\n        if (options.enable &&\n            options.type === \"inline\" &&\n            (options.inline.arrangement === \"one-per-point\" ||\n                options.inline.arrangement === \"per-point\")) {\n            this.drawPoints();\n            return true;\n        }\n        return false;\n    }\n    resize() {\n        const container = this._container, options = this.options;\n        if (!(options.enable && options.type !== \"none\")) {\n            return;\n        }\n        if (this.redrawTimeout) {\n            clearTimeout(this.redrawTimeout);\n        }\n        this.redrawTimeout = window.setTimeout(async () => {\n            await this.initRawData(true);\n            await container.particles.redraw();\n        }, 250);\n    }\n    stop() {\n        delete this.raw;\n        delete this.paths;\n    }\n    checkInsidePolygon(position) {\n        var _a, _b;\n        const container = this._container, options = this.options;\n        if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n            return true;\n        }\n        if (!this.raw) {\n            throw new Error(noPolygonFound);\n        }\n        const canvasSize = container.canvas.size, x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : getRandom() * canvasSize.width, y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : getRandom() * canvasSize.height;\n        let inside = false;\n        for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n            const pi = this.raw[i], pj = this.raw[j], intersect = pi.y > y !== pj.y > y && x < ((pj.x - pi.x) * (y - pi.y)) / (pj.y - pi.y) + pi.x;\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return options.type === \"inside\"\n            ? inside\n            : options.type === \"outside\"\n                ? !inside\n                : false;\n    }\n    createPath2D() {\n        var _a, _b;\n        const options = this.options;\n        if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        for (const path of this.paths) {\n            const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n            if (pathData) {\n                const path2d = new Path2D(pathData), matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix(), finalPath = new Path2D(), transform = matrix.scale(options.scale);\n                if (finalPath.addPath) {\n                    finalPath.addPath(path2d, transform);\n                    path.path2d = finalPath;\n                }\n                else {\n                    delete path.path2d;\n                }\n            }\n            else {\n                delete path.path2d;\n            }\n            if (path.path2d || !this.raw) {\n                continue;\n            }\n            path.path2d = new Path2D();\n            path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n            this.raw.forEach((pos, i) => {\n                var _a;\n                if (i > 0) {\n                    (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n                }\n            });\n            path.path2d.closePath();\n        }\n    }\n    async downloadSvgPath(svgUrl, force) {\n        const options = this.options, url = svgUrl || options.url, forceDownload = force !== null && force !== void 0 ? force : false;\n        if (!url || (this.paths !== undefined && !forceDownload)) {\n            return this.raw;\n        }\n        const req = await fetch(url);\n        if (!req.ok) {\n            throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n        }\n        return this.parseSvgPath(await req.text(), force);\n    }\n    drawPoints() {\n        if (!this.raw) {\n            return;\n        }\n        for (const item of this.raw) {\n            this._container.particles.addParticle({\n                x: item.x,\n                y: item.y,\n            });\n        }\n    }\n    getEquidistantPointByIndex(index) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const options = this._container.actualOptions, polygonMaskOptions = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length))\n            throw new Error(noPolygonDataLoaded);\n        let offset = 0, point;\n        const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0), distance = totalLength / options.particles.number.value;\n        for (const path of this.paths) {\n            const pathDistance = distance * index - offset;\n            if (pathDistance <= path.length) {\n                point = path.element.getPointAtLength(pathDistance);\n                break;\n            }\n            else {\n                offset += path.length;\n            }\n        }\n        return {\n            x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n            y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0),\n        };\n    }\n    getPointByIndex(index) {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(noPolygonDataLoaded);\n        }\n        const coords = this.raw[index % this.raw.length];\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    getRandomPoint() {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(noPolygonDataLoaded);\n        }\n        const coords = itemFromArray(this.raw);\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    getRandomPointByLength() {\n        var _a, _b, _c;\n        const options = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            throw new Error(noPolygonDataLoaded);\n        }\n        const path = itemFromArray(this.paths), distance = Math.floor(getRandom() * path.length) + 1, point = path.element.getPointAtLength(distance);\n        return {\n            x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n            y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0),\n        };\n    }\n    async initRawData(force) {\n        const options = this.options;\n        if (options.url) {\n            this.raw = await this.downloadSvgPath(options.url, force);\n        }\n        else if (options.data) {\n            const data = options.data;\n            let svg;\n            if (typeof data !== \"string\") {\n                const path = data.path instanceof Array\n                    ? data.path.map((t) => `<path d=\"${t}\" />`).join(\"\")\n                    : `<path d=\"${data.path}\" />`;\n                const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n            }\n            else {\n                svg = data;\n            }\n            this.raw = this.parseSvgPath(svg, force);\n        }\n        this.createPath2D();\n        this._engine.dispatchEvent(\"polygonMaskLoaded\", {\n            container: this._container,\n        });\n    }\n    parseSvgPath(xml, force) {\n        var _a, _b, _c;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n        if (this.paths !== undefined && !forceDownload) {\n            return this.raw;\n        }\n        const container = this._container, options = this.options, parser = new DOMParser(), doc = parser.parseFromString(xml, \"image/svg+xml\"), svg = doc.getElementsByTagName(\"svg\")[0];\n        let svgPaths = svg.getElementsByTagName(\"path\");\n        if (!svgPaths.length) {\n            svgPaths = doc.getElementsByTagName(\"path\");\n        }\n        this.paths = [];\n        for (let i = 0; i < svgPaths.length; i++) {\n            const path = svgPaths.item(i);\n            if (path) {\n                this.paths.push({\n                    element: path,\n                    length: path.getTotalLength(),\n                });\n            }\n        }\n        const pxRatio = container.retina.pixelRatio, scale = options.scale / pxRatio;\n        this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n        this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n        const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n            x: 50,\n            y: 50,\n        };\n        this.offset = {\n            x: (container.canvas.size.width * position.x) / (100 * pxRatio) - this.dimension.width / 2,\n            y: (container.canvas.size.height * position.y) / (100 * pxRatio) - this.dimension.height / 2,\n        };\n        return parsePaths(this.paths, scale, this.offset);\n    }\n    polygonBounce(particle, _delta, direction) {\n        const options = this.options;\n        if (!this.raw || !options.enable || direction !== \"top\") {\n            return false;\n        }\n        if (options.type === \"inside\" || options.type === \"outside\") {\n            let closest, dx, dy;\n            const pos = particle.getPosition(), radius = particle.getRadius();\n            for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n                const pi = this.raw[i], pj = this.raw[j];\n                closest = calcClosestPtOnSegment(pi, pj, pos);\n                const dist = getDistances(pos, closest);\n                [dx, dy] = [dist.dx, dist.dy];\n                if (dist.distance < radius) {\n                    segmentBounce(pi, pj, particle.velocity);\n                    return true;\n                }\n            }\n            if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n                const factor = { x: 1, y: 1 };\n                if (particle.position.x >= closest.x) {\n                    factor.x = -1;\n                }\n                if (particle.position.y >= closest.y) {\n                    factor.y = -1;\n                }\n                particle.position.x = closest.x + radius * 2 * factor.x;\n                particle.position.y = closest.y + radius * 2 * factor.y;\n                particle.velocity.mult(-1);\n                return true;\n            }\n        }\n        else if (options.type === \"inline\" && particle.initialPosition) {\n            const dist = getDistance(particle.initialPosition, particle.getPosition());\n            if (dist > this._polygonMaskMoveRadius) {\n                particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n                particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n                return true;\n            }\n        }\n        return false;\n    }\n    randomPoint() {\n        const container = this._container, options = this.options;\n        let position;\n        if (options.type === \"inline\") {\n            switch (options.inline.arrangement) {\n                case \"random-point\":\n                    position = this.getRandomPoint();\n                    break;\n                case \"random-length\":\n                    position = this.getRandomPointByLength();\n                    break;\n                case \"equidistant\":\n                    position = this.getEquidistantPointByIndex(container.particles.count);\n                    break;\n                case \"one-per-point\":\n                case \"per-point\":\n                default:\n                    position = this.getPointByIndex(container.particles.count);\n            }\n        }\n        else {\n            position = {\n                x: getRandom() * container.canvas.size.width,\n                y: getRandom() * container.canvas.size.height,\n            };\n        }\n        if (this.checkInsidePolygon(position)) {\n            return position;\n        }\n        else {\n            return this.randomPoint();\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}