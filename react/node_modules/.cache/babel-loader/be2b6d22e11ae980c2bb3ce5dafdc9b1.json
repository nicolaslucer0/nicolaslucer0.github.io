{"ast":null,"code":"export class Plugins {\n  constructor(engine) {\n    this._engine = engine;\n    this.plugins = [];\n    this.interactorsInitializers = new Map();\n    this.moversInitializers = new Map();\n    this.updatersInitializers = new Map();\n    this.interactors = new Map();\n    this.movers = new Map();\n    this.updaters = new Map();\n    this.presets = new Map();\n    this.drawers = new Map();\n    this.pathGenerators = new Map();\n  }\n\n  addInteractor(name, initInteractor) {\n    this.interactorsInitializers.set(name, initInteractor);\n  }\n\n  addParticleMover(name, initMover) {\n    this.moversInitializers.set(name, initMover);\n  }\n\n  addParticleUpdater(name, initUpdater) {\n    this.updatersInitializers.set(name, initUpdater);\n  }\n\n  addPathGenerator(type, pathGenerator) {\n    if (!this.getPathGenerator(type)) {\n      this.pathGenerators.set(type, pathGenerator);\n    }\n  }\n\n  addPlugin(plugin) {\n    if (!this.getPlugin(plugin.id)) {\n      this.plugins.push(plugin);\n    }\n  }\n\n  addPreset(presetKey, options) {\n    let override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (override || !this.getPreset(presetKey)) {\n      this.presets.set(presetKey, options);\n    }\n  }\n\n  addShapeDrawer(type, drawer) {\n    if (!this.getShapeDrawer(type)) {\n      this.drawers.set(type, drawer);\n    }\n  }\n\n  destroy(container) {\n    this.updaters.delete(container);\n    this.movers.delete(container);\n    this.interactors.delete(container);\n  }\n\n  getAvailablePlugins(container) {\n    const res = new Map();\n\n    for (const plugin of this.plugins) {\n      if (!plugin.needsPlugin(container.actualOptions)) {\n        continue;\n      }\n\n      res.set(plugin.id, plugin.getPlugin(container));\n    }\n\n    return res;\n  }\n\n  getInteractors(container) {\n    let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let res = this.interactors.get(container);\n\n    if (!res || force) {\n      res = [...this.interactorsInitializers.values()].map(t => t(container));\n      this.interactors.set(container, res);\n    }\n\n    return res;\n  }\n\n  getMovers(container) {\n    let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let res = this.movers.get(container);\n\n    if (!res || force) {\n      res = [...this.moversInitializers.values()].map(t => t(container));\n      this.movers.set(container, res);\n    }\n\n    return res;\n  }\n\n  getPathGenerator(type) {\n    return this.pathGenerators.get(type);\n  }\n\n  getPlugin(plugin) {\n    return this.plugins.find(t => t.id === plugin);\n  }\n\n  getPreset(preset) {\n    return this.presets.get(preset);\n  }\n\n  getShapeDrawer(type) {\n    return this.drawers.get(type);\n  }\n\n  getSupportedShapes() {\n    return this.drawers.keys();\n  }\n\n  getUpdaters(container) {\n    let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let res = this.updaters.get(container);\n\n    if (!res || force) {\n      res = [...this.updatersInitializers.values()].map(t => t(container));\n      this.updaters.set(container, res);\n    }\n\n    return res;\n  }\n\n  loadOptions(options, sourceOptions) {\n    for (const plugin of this.plugins) {\n      plugin.loadOptions(options, sourceOptions);\n    }\n  }\n\n  loadParticlesOptions(container, options) {\n    const updaters = this.updaters.get(container);\n\n    if (!updaters) {\n      return;\n    }\n\n    for (var _len = arguments.length, sourceOptions = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      sourceOptions[_key - 2] = arguments[_key];\n    }\n\n    for (const updater of updaters) {\n      if (updater.loadOptions) {\n        updater.loadOptions(options, ...sourceOptions);\n      }\n    }\n  }\n\n}","map":{"version":3,"names":["Plugins","constructor","engine","_engine","plugins","interactorsInitializers","Map","moversInitializers","updatersInitializers","interactors","movers","updaters","presets","drawers","pathGenerators","addInteractor","name","initInteractor","set","addParticleMover","initMover","addParticleUpdater","initUpdater","addPathGenerator","type","pathGenerator","getPathGenerator","addPlugin","plugin","getPlugin","id","push","addPreset","presetKey","options","override","getPreset","addShapeDrawer","drawer","getShapeDrawer","destroy","container","delete","getAvailablePlugins","res","needsPlugin","actualOptions","getInteractors","force","get","values","map","t","getMovers","find","preset","getSupportedShapes","keys","getUpdaters","loadOptions","sourceOptions","loadParticlesOptions","updater"],"sources":["/home/nicolas/Development/personal/react/nicolaslucer0.github.io/react/node_modules/tsparticles-engine/esm/Core/Utils/Plugins.js"],"sourcesContent":["export class Plugins {\n    constructor(engine) {\n        this._engine = engine;\n        this.plugins = [];\n        this.interactorsInitializers = new Map();\n        this.moversInitializers = new Map();\n        this.updatersInitializers = new Map();\n        this.interactors = new Map();\n        this.movers = new Map();\n        this.updaters = new Map();\n        this.presets = new Map();\n        this.drawers = new Map();\n        this.pathGenerators = new Map();\n    }\n    addInteractor(name, initInteractor) {\n        this.interactorsInitializers.set(name, initInteractor);\n    }\n    addParticleMover(name, initMover) {\n        this.moversInitializers.set(name, initMover);\n    }\n    addParticleUpdater(name, initUpdater) {\n        this.updatersInitializers.set(name, initUpdater);\n    }\n    addPathGenerator(type, pathGenerator) {\n        if (!this.getPathGenerator(type)) {\n            this.pathGenerators.set(type, pathGenerator);\n        }\n    }\n    addPlugin(plugin) {\n        if (!this.getPlugin(plugin.id)) {\n            this.plugins.push(plugin);\n        }\n    }\n    addPreset(presetKey, options, override = false) {\n        if (override || !this.getPreset(presetKey)) {\n            this.presets.set(presetKey, options);\n        }\n    }\n    addShapeDrawer(type, drawer) {\n        if (!this.getShapeDrawer(type)) {\n            this.drawers.set(type, drawer);\n        }\n    }\n    destroy(container) {\n        this.updaters.delete(container);\n        this.movers.delete(container);\n        this.interactors.delete(container);\n    }\n    getAvailablePlugins(container) {\n        const res = new Map();\n        for (const plugin of this.plugins) {\n            if (!plugin.needsPlugin(container.actualOptions)) {\n                continue;\n            }\n            res.set(plugin.id, plugin.getPlugin(container));\n        }\n        return res;\n    }\n    getInteractors(container, force = false) {\n        let res = this.interactors.get(container);\n        if (!res || force) {\n            res = [...this.interactorsInitializers.values()].map((t) => t(container));\n            this.interactors.set(container, res);\n        }\n        return res;\n    }\n    getMovers(container, force = false) {\n        let res = this.movers.get(container);\n        if (!res || force) {\n            res = [...this.moversInitializers.values()].map((t) => t(container));\n            this.movers.set(container, res);\n        }\n        return res;\n    }\n    getPathGenerator(type) {\n        return this.pathGenerators.get(type);\n    }\n    getPlugin(plugin) {\n        return this.plugins.find((t) => t.id === plugin);\n    }\n    getPreset(preset) {\n        return this.presets.get(preset);\n    }\n    getShapeDrawer(type) {\n        return this.drawers.get(type);\n    }\n    getSupportedShapes() {\n        return this.drawers.keys();\n    }\n    getUpdaters(container, force = false) {\n        let res = this.updaters.get(container);\n        if (!res || force) {\n            res = [...this.updatersInitializers.values()].map((t) => t(container));\n            this.updaters.set(container, res);\n        }\n        return res;\n    }\n    loadOptions(options, sourceOptions) {\n        for (const plugin of this.plugins) {\n            plugin.loadOptions(options, sourceOptions);\n        }\n    }\n    loadParticlesOptions(container, options, ...sourceOptions) {\n        const updaters = this.updaters.get(container);\n        if (!updaters) {\n            return;\n        }\n        for (const updater of updaters) {\n            if (updater.loadOptions) {\n                updater.loadOptions(options, ...sourceOptions);\n            }\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}